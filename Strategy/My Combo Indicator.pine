//@version=4
study(title="My_Combo_Indicators", shorttitle="MCI", overlay=true)

//1. Simple Moving Average
//2. Exponential Moving Average
//3. Hull Moving Average
//4. Weighted Moving Average
//5. Voulme Weighted Moving Average

smma(src, length) =>
    smma = 0.0
    sma_value = sma(src, length)
    smma := na(smma[1]) ? sma_value : (smma[1] * (length - 1) + src) / length

calc_ma(_src, _len, _type, _res) =>
    symSrc = security(syminfo.tickerid, _res, _src)
    _type == '' ? _src : _type == 'SMA' ? sma(symSrc,_len) : _type == 'EMA' ? ema(symSrc,_len) : _type == 'WMA' ? wma(symSrc, _len) : _type == 'VWMA' ? vwma(symSrc, _len) :  _type == 'SMMA' ? smma(symSrc, _len) : rma(symSrc, _len)

forecasttype="flat"
linreglen=3

forecast(_type,_src,_flen,_lrlen) => _type=="flat" ? _src : _type=="linreg" ? linreg(_src,_lrlen,_flen) : na    

lime      = #15ff00
green     = #53b987
brightred = #e91e63
red       = #eb4d5c
yellgreen = color.blue
yellow    = #ffeb3b
yellred   = color.purple
white     = color.white

ma_plot = input(false, title="Plot Moving Averages")
bb_plot = input(false, title="Plot Bollinger Bands")
td_seq_plot = input(true, "Plot TD Sequential")
tts_plot = input(false, title="Plot Trend Trading System") 
tts_ebc = input(true, title="Color Bars Based on Trend Trade System")
alligator_plot = input(true, title="🐲 Plot Alligator")

//################ Bollinger Bands ##################
bb_src = close
bb_length = input(title="Bollinger Band Length", defval=20,type=input.integer)
bb_stdDev_factor = input(title="Standard Deviation", defval=2,type=input.integer)

bb_stdev = stdev(bb_src, bb_length)
bb_basis = calc_ma(bb_src, bb_length, 'SMA', timeframe.period)
bb_upper = bb_basis + bb_stdDev_factor * bb_stdev
bb_lower = bb_basis - bb_stdDev_factor * bb_stdev

bb_p1 = plot(bb_plot ? bb_upper : na, color=color.green, title="Upper Band", editable=false)
plot(bb_plot ? bb_basis : na , color=color.white, title="BB Moving Average", transp=0, editable=false)
bb_p2 = plot(bb_plot ? bb_lower : na, color=color.green, title="Lower Band", editable=false)
fill(bb_p1, bb_p2, color=color.green, title="Background", transp=90, editable=false)

//################### Trend Trade System #####################
tts_src=close
tts_ema_length = input(26, title="Trend Trade System EMA Length") 
tts_ema = calc_ma(low, tts_ema_length, 'EMA', timeframe.period)
tts_vwap_length = input(13, title="Trend Trade System VWAP Length")
tts_vwap = calc_ma(vwap, tts_vwap_length, 'EMA', timeframe.period)
tts_rsi_len = input(14, minval=1, title="Trend Trade System RSI Length")
tts_up = rma(max(change(tts_src), 0), tts_rsi_len)
tts_down = rma(-min(change(tts_src), 0), tts_rsi_len)
tts_rsi = (tts_down == 0) ? 100 : tts_up == 0 ? 0 : 100 - (100 / (1 + tts_up / tts_down))

plot(tts_plot ? tts_vwap : na, color= color.gray, style=plot.style_line, title="Trend Trade System VWAP Line")
plot(tts_plot ? tts_ema : na , color=color.orange, style=plot.style_line, title="Trend Trade System EMA Line")

tts_cond1 = (tts_rsi > 55 and close > tts_ema) ? color.lime : (tts_rsi > 50 and close > tts_ema) ? color.orange : (tts_rsi > 50 and close > tts_ema) ? color.black : na
barcolor(tts_ebc ? tts_cond1 : na, editable=false)

tts_cond2 = (tts_rsi < 45 and close < tts_ema) ? color.red : (tts_rsi < 50 and close < tts_ema) ? color.yellow : (tts_rsi < 50 and close > tts_ema) ? color.black : na
barcolor(tts_ebc ? tts_cond2 : na, editable=false) 

//########################### TD Sequential ########################################
showSetup = input(true, "Show setup")
showPerfect = input(true, "Show perfect counts")
showOnlyCompletion = input(false, "Only show completions")
showTDST = input(true, "Show TDST Support and Resistance")
showRisk = input(true, "Show risk line")

shortColour = color.green
longColour = color.red
smoothedColour = color.black

setupShort = int(na)
setupLong = int(na)
setupCount = int(na)
setupColour = color(na)
perfectSetup = bool(na)

setupShort := if close < close[4]
    0
else
    if setupShort[1] == 9
        1
    else
        nz(setupShort[1] + 1)

setupLong := if close > close[4]
    0
else
    if setupLong[1] == 9
        1
    else
        nz(setupLong[1] + 1)

setupCount := max(setupShort, setupLong)
setupColour := setupShort > 0 ? setupLong > 0 ? smoothedColour : shortColour : longColour

perfectSetup := showPerfect and (setupShort == 8 and high >= high[1] and high >= high[2] or 
   setupShort == 9 and high >= high[2] and high >= high[3] or 
   setupLong == 8 and low <= low[1] and low <= low[2] or 
   setupLong == 9 and low <= low[2] and low <= low[3])

plotchar(td_seq_plot and showSetup and (not showOnlyCompletion or barstate.islast) and setupCount == 1, title="Setup 1", char="1", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and showSetup and (not showOnlyCompletion or barstate.islast) and setupCount == 2, title="Setup 2", char="2", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and showSetup and (not showOnlyCompletion or barstate.islast) and setupCount == 3, title="Setup 3", char="3", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and showSetup and (not showOnlyCompletion or barstate.islast) and setupCount == 4, title="Setup 4", char="4", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and showSetup and (not showOnlyCompletion or barstate.islast) and setupCount == 5, title="Setup 5", char="5", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and showSetup and (not showOnlyCompletion or barstate.islast) and setupCount == 6, title="Setup 6", char="6", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and showSetup and (not showOnlyCompletion or barstate.islast) and setupCount == 7, title="Setup 7", char="7", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and not perfectSetup and (not showOnlyCompletion or barstate.islast) and showSetup and setupCount == 8, title="Setup 8", char="8", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and not perfectSetup and showSetup and setupCount == 9, title="Setup 9", char="9", color=setupColour, transp=0, editable=false, location=location.abovebar)

plotchar(td_seq_plot and perfectSetup and showSetup and setupCount == 8, title="Perfect setup 8", char="➑", color=setupColour, transp=0, editable=false, location=location.abovebar)
plotchar(td_seq_plot and perfectSetup and showSetup and setupCount == 9, title="Perfect setup 9", char="➒", color=setupColour, transp=0, editable=false, location=location.abovebar)

tdstSupport = float(na)
tdstResistance = float(na)
tdRisk = float(na)
riskbar = int(na)

highest_2 = highest(9)
tdstResistance := not td_seq_plot or not showTDST ? na : setupLong == 9 ? highest_2 : close > tdstResistance[1] ? na : tdstResistance[1]
lowest_2 = lowest(9)
tdstSupport := not td_seq_plot or not showTDST ? na : setupShort == 9 ? lowest_2 : close < tdstSupport[1] ? na : tdstSupport[1]

plot(tdstResistance, title="TDST Resistance", color=longColour, style=plot.style_circles, linewidth=1, editable=false)
plot(tdstSupport, title="TDST Support", color=shortColour, style=plot.style_circles, linewidth=1, editable=false)

lowest_of_9_bars_0 = lowestbars(9)[0]
highest_of_9_bars_0 = highestbars(9)[0]

if not td_seq_plot or not showRisk
    tdRisk := na
    tdRisk
else
    if setupLong == 9
        riskbar := -1 * lowest_of_9_bars_0
        tdRisk := low[riskbar] - tr[riskbar]
        tdRisk
    else
        if setupShort == 9
            riskbar := -1 * highest_of_9_bars_0
            tdRisk := high[riskbar] + tr[riskbar]
            tdRisk
        else
            tdRisk := min(open, close) < tdRisk[1] and max(open, close) > tdRisk[1] ? na : tdRisk[1]
            tdRisk

plot(tdRisk, title="TD Risk", color=color.blue, style=plot.style_circles, linewidth=1, editable=false)

//################### Moving Averages #####################

///
ma_0_res = input(title="0. Moving Average Resolution", type=input.resolution, defval='')
ma_0_type = input(defval='EMA', title='0. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'RMA'])
ma_0_len = input(5, title="0. Moving Average", type=input.integer)
ma_0_col = color.gray

lipsLength  = 5
lipsOffSet  = 3
ma_0_src = alligator_plot ? hl2 : close
ma_0_type := alligator_plot ? 'SMMA' : ma_0_type
ma_0_len := alligator_plot ? lipsLength : ma_0_len
ma_0_offset = alligator_plot ? lipsOffSet : 0

ma_0 = calc_ma(ma_0_src, ma_0_len, ma_0_type, ma_0_res)
plot(ma_plot or alligator_plot ? ma_0 : na, color=ma_0_col, linewidth=1, title="0. Moving Average", offset=ma_0_offset)

/// 1
ma_1_res = input(title="1. Moving Average Resolution", type=input.resolution, defval='')
ma_1_type = input(defval='EMA', title='1. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'RMA'])
ma_1_len = input(8, title="1. Moving Average", type=input.integer)
ma_1_col = color.red

teethLength  = 8
teethOffSet  = 5
ma_1_src = alligator_plot ? hl2 : close
ma_1_type := alligator_plot ? 'SMMA' : ma_1_type
ma_1_len := alligator_plot ? teethLength : ma_1_len
ma_1_offset = alligator_plot ? teethOffSet : 0

ma_1 = calc_ma(ma_1_src, ma_1_len, ma_1_type, ma_1_res)
plot(ma_plot or alligator_plot  ? ma_1 : na, color=ma_1_col, linewidth=1, title="1. Moving Average", offset=ma_1_offset)

/// 2
ma_2_res = input(title="2. Moving Average Resolution", type=input.resolution, defval='')
ma_2_type = input(defval='EMA', title='2. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'RMA'])
ma_2_len = input(13, title="2. Moving Average", type=input.integer)
ma_2_col = color.orange

jawLength  = 13
jawOffset  = 8
ma_2_src = alligator_plot ? hl2 : close
ma_2_type := alligator_plot ? 'SMMA' : ma_2_type
ma_2_len := alligator_plot ? jawLength : ma_2_len
ma_2_offset = alligator_plot ? jawOffset : 0

ma_2 = calc_ma(ma_2_src, ma_2_len, ma_2_type, ma_2_res)
plot(ma_plot or alligator_plot ? ma_2 : na, color=ma_2_col, linewidth=1, title="2. Moving Average", offset=ma_2_offset)

/// 3
ma_3_src = close
ma_3_res = input(title="3. Moving Average Resolution", type=input.resolution, defval='')
ma_3_type = input(defval='EMA', title='3. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'RMA'])
ma_3_len = input(21, title="3. Moving Average", type=input.integer)
ma_3_col = color.white
ma_3 = calc_ma(ma_3_src, ma_3_len, ma_3_type, ma_3_res)
plot(ma_plot ? ma_3 : na, color=ma_3_col, linewidth=1, title="3. Moving Average")

///
ma_4_src = close
ma_4_res = input(title="4. Moving Average Resolution", type=input.resolution, defval='')
ma_4_type = input(defval='EMA', title='4. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'RMA'])
ma_4_len = input(34, title="4. Moving Average", type=input.integer)
ma_4_col = color.yellow
ma_4 = calc_ma(ma_4_src, ma_4_len, ma_4_type, ma_4_res)
plot(ma_plot ? ma_4 : na, color=ma_4_col, linewidth=1, title="4. Moving Average")

///
ma_5_src = close
ma_5_res = input(title="5. Moving Average Resolution", type=input.resolution, defval='')
ma_5_type = input(defval='EMA', title='5. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'RMA'])
ma_5_len = input(55, title="5. Moving Average", type=input.integer)
ma_5_col = color.blue
ma_5 = calc_ma(ma_5_src, ma_5_len, ma_5_type, ma_5_res)
plot(ma_plot ? ma_5 : na, color=ma_5_col, linewidth=1, title="5. Moving Average")

///
ma_6_src = close
ma_6_res = input(title="6. Moving Average Resolution", type=input.resolution, defval='')
ma_6_type = input(defval='SMA', title='6. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'RMA'])
ma_6_len = input(100, title="6. Moving Average", type=input.integer)
ma_6_col = color.purple
ma_6 = calc_ma(ma_6_src, ma_6_len, ma_6_type, ma_6_res)
plot(ma_plot ? ma_6 : na, color=ma_6_col, linewidth=1, title="6. Moving Average")

///
ma_7_src = close
ma_7_res = input(title="7. Moving Average Resolution", type=input.resolution, defval='')
ma_7_type = input(defval='SMA', title='7. Moving Average Type', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'RMA'])
ma_7_len = input(200, title="7. Moving Average", type=input.integer)
ma_7_col = color.green
ma_7 = calc_ma(ma_7_src, ma_7_len, ma_7_type, ma_7_res)
plot(ma_plot ? ma_7 : na, color=ma_7_col, linewidth=1, title="7. Moving Average")